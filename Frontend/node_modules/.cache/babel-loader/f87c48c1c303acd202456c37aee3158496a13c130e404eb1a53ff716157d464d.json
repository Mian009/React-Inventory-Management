{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = SideEffect;\nvar _interop_require_wildcard = require(\"@swc/helpers/lib/_interop_require_wildcard.js\").default;\nvar _react = _interop_require_wildcard(require(\"react\"));\nfunction SideEffect(props) {\n  const {\n    headManager,\n    reduceComponentsToState\n  } = props;\n  function emitChange() {\n    if (headManager && headManager.mountedInstances) {\n      const headElements = _react.Children.toArray(Array.from(headManager.mountedInstances).filter(Boolean));\n      headManager.updateHead(reduceComponentsToState(headElements, props));\n    }\n  }\n  if (isServer) {\n    var ref;\n    headManager == null ? void 0 : (ref = headManager.mountedInstances) == null ? void 0 : ref.add(props.children);\n    emitChange();\n  }\n  useClientOnlyLayoutEffect(() => {\n    var ref1;\n    headManager == null ? void 0 : (ref1 = headManager.mountedInstances) == null ? void 0 : ref1.add(props.children);\n    return () => {\n      var ref;\n      headManager == null ? void 0 : (ref = headManager.mountedInstances) == null ? void 0 : ref.delete(props.children);\n    };\n  });\n  // We need to call `updateHead` method whenever the `SideEffect` is trigger in all\n  // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s\n  // being rendered, we only trigger the method from the last one.\n  // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`\n  // singleton in the layout effect pass, and actually trigger it in the effect pass.\n  useClientOnlyLayoutEffect(() => {\n    if (headManager) {\n      headManager._pendingUpdate = emitChange;\n    }\n    return () => {\n      if (headManager) {\n        headManager._pendingUpdate = emitChange;\n      }\n    };\n  });\n  useClientOnlyEffect(() => {\n    if (headManager && headManager._pendingUpdate) {\n      headManager._pendingUpdate();\n      headManager._pendingUpdate = null;\n    }\n    return () => {\n      if (headManager && headManager._pendingUpdate) {\n        headManager._pendingUpdate();\n        headManager._pendingUpdate = null;\n      }\n    };\n  });\n  return null;\n}\nconst isServer = typeof window === 'undefined';\nconst useClientOnlyLayoutEffect = isServer ? () => {} : _react.useLayoutEffect;\nconst useClientOnlyEffect = isServer ? () => {} : _react.useEffect;","map":{"version":3,"mappings":"AAAA;;;;;kBAmBwBA,UAAU;;AAnB0B,UAAO,qCAAP,OAAO;AAmBpD,SAASA,UAAU,CAACC,KAAsB,EAAE;EACzD,MAAM;IAAEC,WAAW;IAAEC;EAAuB,CAAE,GAAGF,KAAK;EAEtD,SAASG,UAAU,GAAG;IACpB,IAAIF,WAAW,IAAIA,WAAW,CAACG,gBAAgB,EAAE;MAC/C,MAAMC,YAAY,GAAGC,MAAQ,UAACC,OAAO,CACnCC,KAAK,CAACC,IAAI,CAACR,WAAW,CAACG,gBAAgB,CAAiB,CAACM,MAAM,CAACC,OAAO,CAAC,CACzE;MACDV,WAAW,CAACW,UAAU,CAACV,uBAAuB,CAACG,YAAY,EAAEL,KAAK,CAAC,CAAC;;;EAIxE,IAAIa,QAAQ,EAAE;QACZZ,GAA6B;IAA7BA,WAAW,QAAkB,GAA7BA,MAA6B,GAA7BA,IAA6B,GAA7BA,WAAW,CAAEG,gBAAgB,YAA7BH,MAA6B,GAA7BA,GAA6B,CAAEa,GAAG,CAACd,KAAK,CAACe,QAAQ,CAAC;IAClDZ,UAAU,EAAE;;EAGda,yBAAyB,CAAC,MAAM;QAC9Bf,IAA6B;IAA7BA,WAAW,QAAkB,GAA7BA,MAA6B,GAA7BA,KAA6B,GAA7BA,WAAW,CAAEG,gBAAgB,YAA7BH,MAA6B,GAA7BA,IAA6B,CAAEa,GAAG,CAACd,KAAK,CAACe,QAAQ,CAAC;IAClD,OAAO,MAAM;UACXd,GAA6B;MAA7BA,WAAW,QAAkB,GAA7BA,MAA6B,GAA7BA,IAA6B,GAA7BA,WAAW,CAAEG,gBAAgB,YAA7BH,MAA6B,GAA7BA,GAA6B,CAAEgB,MAAM,CAACjB,KAAK,CAACe,QAAQ,CAAC;KACtD;GACF,CAAC;EAEF;EACA;EACA;EACA;EACA;EACAC,yBAAyB,CAAC,MAAM;IAC9B,IAAIf,WAAW,EAAE;MACfA,WAAW,CAACiB,cAAc,GAAGf,UAAU;;IAEzC,OAAO,MAAM;MACX,IAAIF,WAAW,EAAE;QACfA,WAAW,CAACiB,cAAc,GAAGf,UAAU;;KAE1C;GACF,CAAC;EAEFgB,mBAAmB,CAAC,MAAM;IACxB,IAAIlB,WAAW,IAAIA,WAAW,CAACiB,cAAc,EAAE;MAC7CjB,WAAW,CAACiB,cAAc,EAAE;MAC5BjB,WAAW,CAACiB,cAAc,GAAG,IAAI;;IAEnC,OAAO,MAAM;MACX,IAAIjB,WAAW,IAAIA,WAAW,CAACiB,cAAc,EAAE;QAC7CjB,WAAW,CAACiB,cAAc,EAAE;QAC5BjB,WAAW,CAACiB,cAAc,GAAG,IAAI;;KAEpC;GACF,CAAC;EAEF,OAAO,IAAI;;AAzDb,MAAML,QAAQ,GAAG,OAAOO,MAAM,KAAK,WAAW;AAC9C,MAAMJ,yBAAyB,GAAGH,QAAQ,GAAG,MAAM,EAAE,GAAGQ,MAAe;AACvE,MAAMF,mBAAmB,GAAGN,QAAQ,GAAG,MAAM,EAAE,GAAGS,MAAS","names":["SideEffect","props","headManager","reduceComponentsToState","emitChange","mountedInstances","headElements","Children","toArray","Array","from","filter","Boolean","updateHead","isServer","add","children","useClientOnlyLayoutEffect","delete","_pendingUpdate","useClientOnlyEffect","window","useLayoutEffect","useEffect"],"sources":["../../../src/shared/lib/side-effect.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}